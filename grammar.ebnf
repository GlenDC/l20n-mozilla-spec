body                 ::= (entry NL)* (entry)? EOF;
entry                ::= comment
                      | section
                      | message
                      ;

comment              ::= '#' .*;
section              ::= '[[' __ keyword __ ']]';

__                   ::= [ \t]*;
NL                   ::= [\r\n]+;
identifier-head      ::= [a-zA-Z_.?-];
identifier-tail      ::= [a-zA-Z0-9_.?-];
keyword-head         ::= [^=|#/{}\[\]()0-9];
keyword-tail         ::= [^=|#/{}\[\]() ];
keyword-last         ::= [^=|#/{}\[\]()];

identifier           ::= identifier-head (identifier-tail)*;
variable             ::= '$' identifier;
keyword              ::= keyword-head (keyword-tail* keyword-last)?
builtin              ::= [A-Z_.?-]+;
number               ::= [0-9]+ ('.' [0-9]+)?;
member               ::= '*'? '[' member-key ']' __ pattern NL;
member-key           ::= number | (identifier '/')? keyword;
member-list          ::= NL member+;

message              ::= identifier __ '=' __ (pattern | pattern member-list | member-list);
pattern              ::= unquoted-pattern
                      |  quoted-pattern
                      ;
unquoted-pattern     ::= (unquoted-text | placeable | block-text)+;
quoted-pattern       ::= '"' (quoted-text | placeable)* '"';
unquoted-text        ::= ([^{] | '\{')+;
quoted-text          ::= ([^{"] | '\{' | '\"')+;
block-text           ::= NL __ '|' unquoted-pattern;

placeable            ::= '{' __ placeable-list __ '}';
placeable-list       ::= placeable-expression (__ ',' __ placeable-list)?;
placeable-expression ::= expression
                      |  select-expression
                      ;
expression           ::= quoted-pattern
                      |  number
                      |  identifier
                      |  variable
                      |  call-expression
                      |  member-expression
                      ;
select-expression    ::= expression __ ' ->' __ member-list;
call-expression      ::= builtin '(' __ arglist? __ ')';
arglist              ::= argument (__ ',' __ arglist)?;
argument             ::= expression
                      |  keyword-argument;
keyword-argument     ::= identifier __ '=' __ quoted-pattern;
member-expression    ::= identifier '[' keyword ']';
